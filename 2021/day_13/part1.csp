import "libc/stdio.csp";
import "libc/string.csp";
import "libc/ctype.csp";
import "file.csp";
import "vec.csp";
import "string.csp";

type Dot: struct {
    x: i32,
    y: i32
};

fn main(): i32 {
    let inputstr = std::file::getstr(file!("input.txt"));
    let lines = std::string::split(inputstr, "\n");

    let dots = vec![Dot];

    for let i = 0; i < std::vec::size(lines); i++; {
        if lines[i][0] == 'f' {
            let data = std::string::split(std::string::split(lines[i], " ")[2], "=");
            let folded_dots = vec![Dot];
            let pos = strtol(data[1], nil, 10);

            if data[0][0] == 'x' {
                for let i = 0; i < std::vec::size(dots); i++; {
                    if dots[i].x > pos {
                        vec_add!(folded_dots, dots[i]);
                        vec_remove!(dots, i--);
                    }
                }

                for let i = 0; i < std::vec::size(folded_dots); i++; {
                    let x = folded_dots[i].x;
                    folded_dots[i].x = pos - (x - pos);

                    if !at_pos(dots, folded_dots[i].x, folded_dots[i].y) {
                        vec_add!(dots, folded_dots[i]);
                    }
                }
            }
            else if data[0][0] == 'y' {
                for let i = 0; i < std::vec::size(dots); i++; {
                    if dots[i].y > pos {
                        vec_add!(folded_dots, dots[i]);
                        vec_remove!(dots, i--);
                    }
                }

                for let i = 0; i < std::vec::size(folded_dots); i++; {
                    let y = folded_dots[i].y;
                    folded_dots[i].y = pos - (y - pos);

                    if !at_pos(dots, folded_dots[i].x, folded_dots[i].y) {
                        vec_add!(dots, folded_dots[i]);
                    }
                }
            }
            break;
        }
        else if isdigit(lines[i][0]) {
            let coords = std::string::split(lines[i], ",");
            let dot = Dot :: {strtol(coords[0], nil, 10), strtol(coords[1], nil, 10)};
            vec_add!(dots, dot);
        }
    }
    printf("total dots: %ld\n", std::vec::size(dots));
    <- 0;
}

fn at_pos(dots: &Dot, x: i32, y: i32): bool {
    for let i = 0; i < std::vec::size(dots); i++; {
        if dots[i].x == x && dots[i].y == y ret true;
    }
    <- false;
}
