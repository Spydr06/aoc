import "libc/stdio.csp";
import "libc/string.csp";
import "libc/ctype.csp";
import "file.csp";
import "vec.csp";
import "string.csp";

const adjacent: i32[] = [
     1,  0,
    -1,  0,
     0,  1,
     0, -1
];

fn main(): i32 {
    let inputstr = std::file::getstr(file!("input.txt"));
    let lines = std::string::split(inputstr, "\n");

    let basin_sizes = vec![i32];
    let seen = vec![&char];

    for let i: u64 = 0; i < std::vec::size(lines); i++; {
        for let j: u64 = 0; j < std::string::size(lines[i]); j++; {
            if !isdigit(lines[i][j]) 
                continue;

            let lowest = true;
            for let k = 0; k < 4; k++; {
                let x = j + adjacent[k * 2];
                let y = i + adjacent[k * 2 + 1];

                if x >= 0 && x < std::string::size(lines[i]) && y >= 0 && y < std::vec::size(lines) {
                    if lines[y][x] <= lines[i][j]
                        lowest = false;
                }
            }
            if lowest {
                let b = basin_size(j, i, lines, std::string::size(lines[i]), std::vec::size(lines), &seen);
                vec_add!(basin_sizes, b);
            }
        }
    }

    ::qsort(basin_sizes, std::vec::size(basin_sizes), sizeof i32, 
        |a: const &void, b: const &void| i32 => {
            let ia = *(a: &i32);
            let ib = *(b: &i32);
            if ia == ib ret 0;
            else if ia < ib ret 1;
            else ret -1;
        }
    );

    printf("total risk level: %d\n", basin_sizes[0] * basin_sizes[1] * basin_sizes[2]);
    <- 0;
}

fn basin_size(x: i32, y: i32, map: &&char, x_max: u64, y_max: u64, seen: &&&char): i32 {
    let sum = 1;
    for let i = 0; i < 4; i++; {
        let xx = x + adjacent[i * 2];
        let yy = y + adjacent[i * 2 + 1];

        if xx >= 0 && xx < x_max && yy >= 0 && yy < y_max && map[yy][xx] >= map[y][x] && map[yy][xx] != '9' && !was_seen(seen, &(map[yy][xx]))
            sum += basin_size(xx, yy, map, x_max, y_max, seen);
    }
    <- sum;
}

fn was_seen(vec: &&&char, ptr: &char): bool {
    for let i: u64 = 0; i < std::vec::size(*vec); i++; {
        if (*vec)[i] == ptr ret true;
    }
    vec_add!(*vec, ptr);
    <- false;
}