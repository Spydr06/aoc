import "libc/stdio.csp";
import "libc/string.csp";
import "libc/ctype.csp";
import "file.csp";
import "vec.csp";
import "string.csp";

const adjacent: i32[] = [
     1,  0,
    -1,  0,
     0,  1,
     0, -1
];

fn main(): i32 {
    let inputstr = std::file::getstr(file!("input.txt"));
    let lines = std::string::split(inputstr, "\n");
    
    let risk_levels = 0;

    for let i = 0; i < std::vec::size(lines); i++; {
        for let j = 0; j < std::string::size(lines[i]); j++; {
            if !isdigit(lines[i][j]) 
                continue;

            let lowest = true;
            for let k = 0; k < 4; k++; {
                let x = j + adjacent[k * 2];
                let y = i + adjacent[k * 2 + 1];

                if x >= 0 && x < std::string::size(lines[i]) && y >= 0 && y < std::vec::size(lines) {
                    if lines[y][x] <= lines[i][j]
                        lowest = false;
                }
            }
            if lowest
                risk_levels += (lines[i][j] - '0' + 1);
        }
    }

    printf("total risk level: %d\n", risk_levels);
    <- 0;
}