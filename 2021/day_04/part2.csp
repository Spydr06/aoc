import "libc/stdio.csp";
import "libc/string.csp";
import "libc/ctype.csp";
import "file.csp";
import "vec.csp";
import "string.csp";

type Board: struct { data: i32[5][5] };

fn main(): i32 {
    let inputstr = std::file::getstr(file!("input.txt"));
    let lines = std::string::split(inputstr, "\n");
    let numbers = std::string::split(lines[0], ",");
    let drawn_nums = vec![i32];
    let boards = get_boards(lines);

    for let i = 0; i < std::vec::size(numbers); i++; {
        let as_int = strtol(numbers[i], nil, 10);
        vec_add!(drawn_nums, as_int);

        for let j = 0; j < std::vec::size(boards); j++; {
            if(check_winner(boards[j], drawn_nums)) {
                if std::vec::size(boards) == 1 {
                    let unmarked_sum = 0;
                    for let k = 0; k < 25; k++; {
                        if !int_vec_contains(drawn_nums, boards[0].data[k % 5][k / 5])
                            unmarked_sum += boards[0].data[k % 5][k / 5];
                    }
                    printf("final score: %d\n", unmarked_sum * drawn_nums[i]);
                    <- 0;
                }

                vec_remove!(boards, j);
                j--;
            }
        }
    }
    <- 0;
}

fn get_boards(lines: &std::String): &Board {
    let boards = vec![Board];

    for let i = 2; i < std::vec::size(lines); i += 6; {
        let board: Board;
        
        for let j = 0; j < 5; j++; {
            let line_nums = std::string::split(lines[j+i], " ");
            for let k = 0; k < std::vec::size(line_nums); k++; {
                if !isdigit(line_nums[k][0]) {
                    vec_remove!(line_nums, k);
                    k--;
                }
                else
                    board.data[j][k] = strtol(line_nums[k], nil, 10);
            }
        }
        vec_add!(boards, board);
    }

    <- boards;
}

fn check_winner(board: Board, drawn_nums: &i32): bool {
    # rows
    for let i = 0; i < 5; i++; {
        if int_vec_contains(drawn_nums, board.data[i][0]) &&
           int_vec_contains(drawn_nums, board.data[i][1]) &&
           int_vec_contains(drawn_nums, board.data[i][2]) &&
           int_vec_contains(drawn_nums, board.data[i][3]) &&
           int_vec_contains(drawn_nums, board.data[i][4]) 
        {
            <- true;
        }
    }

    # columns
    for let i = 0; i < 5; i++; {
        if int_vec_contains(drawn_nums, board.data[0][i]) &&
           int_vec_contains(drawn_nums, board.data[1][i]) &&
           int_vec_contains(drawn_nums, board.data[2][i]) &&
           int_vec_contains(drawn_nums, board.data[3][i]) &&
           int_vec_contains(drawn_nums, board.data[4][i]) 
        {
            <- true;
        }
    }

    <- false;
}

fn int_vec_contains(v: &i32, i: i32): bool {
    for let j = 0; j < std::vec::size(v); j++; {
        if v[j] == i ret true;
    }
    <- false;
}