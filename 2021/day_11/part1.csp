import "libc/stdio.csp";
import "libc/string.csp";
import "file.csp";
import "vec.csp";
import "string.csp";

const adjacent: i32[] = [0, -1, -1, -1, 1, -1, 0, 1, -1,  1, 1,  1, 1, 0, -1, 0];

fn main(): i32 {
    let inputstr = std::file::getstr(file!("input.txt"));
    let lines = std::string::split(inputstr, "\n");
    let grid: i32[10][10];
    let total_flashes = 0;

    for let i = 0; i < 100; i++; {
        grid[i / 10][i % 10] = lines[i % 10][i / 10] - '0';
    }

    for let i = 0; i < 100; i++; {
        let flashed: bool[10][10];
        memset(flashed, 0, sizeof bool * 100);

        for let j = 0; j < 100; j++; {
            grid[j % 10][j / 10]++;
        }

        for let j = 0; j < 100; j++; {
            if grid[j % 10][j / 10] > 9
                total_flashes += flash(j % 10, j / 10, grid, flashed);
        }
    }
    printf("total flashes: %d\n", total_flashes);
    <- 0;
}

fn flash(x: i32, y: i32, grid: i32[10][], flashed: bool[10][]): i32 {
    let flashes = 1;
    flashed[x][y] = true;
    grid[x][y] = 0;

    for let i = 0; i < 8; i++; {
        let xx = x + adjacent[i * 2];
        let yy = y + adjacent[i * 2 + 1];

        if xx >= 0 && xx < 10 && yy >= 0 && yy < 10 && !flashed[xx][yy] && (grid[xx][yy]++) > 8
            flashes += flash(xx, yy, grid, flashed);
    }
    <- flashes;
}