import "libc/stdio.csp";
import "libc/string.csp";
import "libc/ctype.csp";
import "file.csp";
import "vec.csp";
import "string.csp";

type Cave: struct {
    name: std::String,
    small: bool,
    conn: &&Cave
};

fn main(): i32 {
    let inputstr = std::file::getstr(file!("input.txt"));
    let lines = std::string::split(inputstr, "\n");
    let caves = vec![&Cave];

    for let i = 0; i < std::vec::size(lines); i++; {
        let names = std::string::split(lines[i], "-");
        let tmp = cave::get(caves, names[0]);
        if !tmp {
            tmp = cave::init(names[0]);
            vec_add!(caves, tmp);
        }

        let con = cave::get(caves, names[1]);
        if !con {
            con = cave::init(names[1]);
            vec_add!(caves, con);
        }

        vec_add!(tmp.conn, con);
        vec_add!(con.conn, tmp);
    }

    let start = cave::get(caves, "start");
    let end = cave::get(caves, "end");

    printf("total paths: %d\n", cave::paths(start, end, nil, false));
    <- 0;
}

namespace cave {
    fn init(name: &char): &Cave {
        let cave: &Cave = ::malloc(sizeof Cave);
        cave.name = name;
        cave.small = ::islower(name[0]);
        cave.conn = vec![&Cave];

        <- cave;
    }

    fn get(caves: &&Cave, name: &char): &Cave {
        for let i = 0; i < ::std::vec::size(caves); i++; {
            if ::strcmp(caves[i].name, name) == 0 ret caves[i];
        }
        <- nil;
    }

    fn paths(start: &Cave, end: &Cave, visited: &&Cave, once: bool): i32 {
        if start == end ret 1;

        let path_c = 0;
        let new_visited = vec![&Cave];
        if visited {
            for let i = 0; i < ::std::vec::size(visited); i++; {
                vec_add!(new_visited, visited[i]);
            }
        }
        if start.small {
            vec_add!(new_visited, start);
        }

        for let i = 0; i < ::std::vec::size(start.conn); i++; {
            if strcmp(start.conn[i].name, "start") == 0 continue;
            if !was_visited(start.conn[i], new_visited)
                path_c += paths(start.conn[i], end, new_visited, once);
            else if !once
                path_c += paths(start.conn[i], end, new_visited, true);
        }

        <- path_c;
    }

    fn was_visited(cave: &Cave, visited: &&Cave): bool {
        for let i = 0; i < ::std::vec::size(visited); i++; {
            if visited[i] == cave ret true;
        }
        ret false;
    }
}