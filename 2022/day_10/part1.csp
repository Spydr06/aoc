import "std.csp";

fn cycle(cycles: &i32, x_reg: i32): i32
    <- (*cycles) += 1 |> if $ == $ / 40 * 40 + 20 => $ * x_reg else 0;

fn main(): i32 {
    using std;

    with f = file!("input.txt") {
        let input = file::read_all(f);
        let lines = string::split(input, "\n");

        let x_reg = 1;
        let cycles = 0;
        let signal_strength = 0;

        for let i = 0; i < vec_size!(lines); i++; {
            do continue unless len lines[i];
            
            match lines[i][0] {
                'n' => signal_strength += cycle(&cycles, x_reg);
                'a' => {
                    signal_strength += cycle(&cycles, x_reg);
                    signal_strength += cycle(&cycles, x_reg);
                    x_reg += c_str::to_i32(&lines[i][5]);
                }
                _ => noop;
            }
        }

        io::printf("total signal strength: %i\n", signal_strength);

        vec_free!(lines);
        free!(input);
    }

    <- 0;
}
